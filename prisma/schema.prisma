// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  men
  women
  kids
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubCategory {
  topwear
  bottomwear
  winterwear
}

enum Size {
  S
  M
  L
  XL
  XXL
}

enum UserRole {
  ADMIN
  SELLER
  CUSTOMER
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  image     String?
  password  String?
  role      UserRole @default(CUSTOMER)
  isOAuth   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seller    Seller?
  Order     Order[]
  Review    Review[]
  Cart      Cart[]
  cartItems CartItem[]
}

model Seller {
  id          String        @id @default(cuid())
  userId      String        @unique
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  email       String?
  address     String
  phone       String
  managerName String?
  postalCode  String?
  status      SellerStatus?
  products    Product[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Order       Order[]
}

model Product {
  id            String      @id @default(cuid())
  name          String
  description   String
  price         Float
  stockQuantity Int
  image         String[]
  category      Category
  subCategory   SubCategory
  stockSize     SizeStock[]
  sellerId      String
  seller        Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ratings       Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Review          Review[]
  Order           Order[]
}

model SizeStock {
  id        String   @id @default(cuid())
  size      Size
  quantity  Int
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartItems CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemParamater {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id           String    @id @default(cuid())
  orderDate    DateTime  @default(now())
  totalPrice   Float
  status       String
  customerName String
  address      String
  phoneNumber  String
  quantity     Int
  price        Float
  sellerId     String
  seller       Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  size         String
  productId    String
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Relation with Product
  shipment     Shipment?
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  images     String[]
  reviewDate DateTime @default(now())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Shipment {
  id           String    @id @default(cuid())
  status       String
  deliveryDate DateTime?
  orderId      String    @unique
  order        Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sizeStockId String
  sizeStock  SizeStock @relation(fields: [sizeStockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity  Int
  totalPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartItems CartItem[]
  totalCartValue Float @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}