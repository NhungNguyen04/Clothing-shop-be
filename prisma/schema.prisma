// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  men
  women
  kids
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubCategory {
  topwear
  bottomwear
  winterwear
}

enum Size {
  S
  M
  L
  XL
  XXL
}

enum UserRole {
  ADMIN
  SELLER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  VIETQR
  VNPAY
}

enum PaymentStatus {
  PENDING
  SUCCESS
}

model Address {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId  String?
  seller    Seller?
  phoneNumber String
  address   String
  postalCode String?
  street String?
  ward String?
  district String?
  province String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  image     String?
  password  String?
  emailVerified Boolean @default(false)
  address   Address[]
  role      UserRole @default(CUSTOMER)
  isOAuth   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seller    Seller?
  Order     Order[]
  Review    Review[]
  Cart      Cart[]
  cartItems CartItem[]
  conversations Conversation[]
  sentMessages Message[] @relation("UserSentMessages")
  notifications Notification[]
}

model Seller {
  id          String        @id @default(cuid())
  userId      String        @unique
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  email       String?
  image       String?
  addressId String? @unique
  address     Address?     @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  managerName String?
  status      SellerStatus?
  products    Product[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Order       Order[]
  conversations Conversation[]
}

model Product {
  id            String      @id @default(cuid())
  name          String
  description   String
  price         Float
  stockQuantity Int
  image         String[]
  category      Category
  subCategory   SubCategory
  stockSize     SizeStock[]
  sellerId      String
  seller        Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviews       Int @default(0)
  averageRating Float @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Review        Review[]
}

model SizeStock {
  id        String   @id @default(cuid())
  size      Size
  quantity  Int
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartItems CartItem[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemParamater {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sizeStockId String
  sizeStock  SizeStock @relation(fields: [sizeStockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity  Int
  totalPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  phoneNumber       String
  address    String
  postalCode String?
  paymentMethod PaymentMethod @default(COD)
  paymentStatus PaymentStatus @default(PENDING)
  sellerId    String
  seller      Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderDate   DateTime @default(now())
  totalPrice  Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems   OrderItem[]
  shipment    Shipment?
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  images     String[]
  reviewDate DateTime @default(now())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Shipment {
  id           String    @id @default(cuid())
  status       String
  deliveryDate DateTime?
  orderId      String    @unique
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sizeStockId String
  sizeStock  SizeStock @relation(fields: [sizeStockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity  Int
  totalPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartItems CartItem[]
  totalCartValue Float @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId  String
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messages  Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Message {
  id             String   @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId       String
  sender         User     @relation("UserSentMessages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id          String   @id @default(cuid())
  reportType  String   // sales, inventory, users, orders, etc.
  parameters  Json?    // filters or parameters used for the report
  generatedBy String   // admin user ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}